/**
 * 
 */
package data;

import java.sql.*;
import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * @author Christine
 *
 */
public class Books {
	static Scanner input = new Scanner (System.in);
	Connection con = null;
	PreparedStatement pst;
	ResultSet rs = null;

	public void displayBookData () throws Exception {
		String query = "SELECT * from BOOKS " ;	

		try {
			Statement statement = con.createStatement();
			con = ConnectionLibrary.getConnection();	
			rs = statement.executeQuery(query);					
			
			System.out.println("BookCode          Title             Author       Price          Type             Subject");
			while (rs.next()) {
				String bookCode = rs.getString("BOOKCODE").toString();
				String title = rs.getString("TITLE");
				String author = rs.getString("AUTHOR");
				String price = rs.getString("PRICE").toString();
				String type = rs.getString("TYPE");
				String subject = rs.getString("SUBJECT");
				System.out.printf("%-10s %-25s %-10s %-10s %-17s %-10s\n", 
							bookCode, title, author, price, type, subject);
			};
			
		}catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionLibrary.closeConnection(con, pst, rs);
		}
	}

	public int selectFromBookMenu () {
		int menuSelection =0;
		boolean validInput = false;
		do {
			System.out.println("1. Add Data                       \n2. Update Data"
					       + "\n3. Delete Data                    \n4. Search"
					       + "\n5. Display table data             \n6. Quit");
			System.out.print("Please choose an option");
			try {
				menuSelection = input.nextInt();
				if (menuSelection !=1 && menuSelection !=2 && menuSelection != 3
						&& menuSelection != 4 && menuSelection != 5 && menuSelection != 6) {
					throw new IllegalArgumentException ("Invalid input. Please enter a valid input");
				}
				validInput = true;
				
			}catch (InputMismatchException exx) {
				System.out.println("Invalid input. Please enter again");
				input.nextLine();
			}catch (IllegalArgumentException ex) {
				System.out.println(ex.getMessage());
			}catch (Exception e) {
				e.printStackTrace();
			}
		} while (!validInput);
		
		return menuSelection;
	}


	public void addData(int bookCode, String title, String author, double price, String type, String subject)
			throws Exception {

		String insertQuery = "Insert into BOOKS (bookcode, title, author, price, type, subject) values (?,?,?,?,?,?)";
		try {
			con = ConnectionLibrary.getConnection();
			pst = con.prepareStatement(insertQuery);

			pst.setInt(1, bookCode);
			pst.setString(2, title);
			pst.setString(3, author);
			pst.setDouble(4, price);
			pst.setString(5, type);
			pst.setString(6, subject);

			pst.executeUpdate();
			System.out.println("Add complete");
			displayBookData();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionLibrary.closeConnection(con, pst, null);
		}
	}

	public void updateData(int bookCode, double price) throws Exception {
		String updateQuery = "Update BOOKS set price=? where BOOKCODE=?";

		try {
			con = ConnectionLibrary.getConnection();
			pst = con.prepareStatement(updateQuery);

			pst.setDouble(1, price);
			pst.setDouble(2, bookCode);

			pst.executeUpdate();
			System.out.println("Update complete");
			displayBookData();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionLibrary.closeConnection(con, pst, null);
		}
	}

	public void deleteData(int bookCode) throws Exception {
		String deleteQuery = "DELETE from BOOKS Where BOOKCODE=?;";

		try {
			con = ConnectionLibrary.getConnection();
			pst = con.prepareStatement(deleteQuery);

			pst.setInt(1, bookCode);

			pst.executeUpdate();
			System.out.println("Delete complete");
			displayBookData();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionLibrary.closeConnection(con, pst, null);
		}
	}

	public void searchData(int searchOption, String search) throws Exception {
		String searchQuery = "";

		if (searchOption == 1)
			searchQuery = "SELECT * from BOOKS where AUTHOR LIKE ?";

		else // this case we always make sure that the other option is searching by title
			searchQuery = "SELECT * from BOOKS where TITLE LIKE ?";

		try {
			con = ConnectionLibrary.getConnection();
			pst = con.prepareStatement(searchQuery);

			pst.setString(1, "%" + search + "%");

			rs = pst.executeQuery();
			System.out.println(
					"BookCode          Title             Author       Price          Type             Subject");
			while (rs.next()) {
				String bookCode = rs.getString("BOOKCODE").toString();
				String title = rs.getString("TITLE");
				String author = rs.getString("AUTHOR");
				String price = rs.getString("PRICE").toString();
				String type = rs.getString("TYPE");
				String subject = rs.getString("SUBJECT");
				System.out.printf("%-10s %-25s %-10s %-10s %-17s %-10s\n", bookCode, title, author, price, type,
						subject);
			}
			;

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionLibrary.closeConnection(con, pst, rs);
		}
	}

}
